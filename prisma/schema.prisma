generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  QuestionGenerated QuestionGenerated[]
  QuestionBank      QuestionBank[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuestionGenerated {
  id        String   @id @default(cuid())
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user_id   String   @db.VarChar(255)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model QuestionBank {
  id        String   @id @default(cuid())
  question  String   @db.VarChar(255)
  a         String?  @db.VarChar(255)
  b         String?  @db.VarChar(255)
  c         String?  @db.VarChar(255)
  d         String?  @db.VarChar(255)
  e         String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user_id   String   @db.VarChar(255)
  answer    String?  @db.VarChar(255)
  subject   String?  @db.VarChar(255)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
